name: CI/CD da API Laravel

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Job 1: Testes e Lint
  test-and-lint:
    runs-on: ubuntu-latest
    name: Testar e Analisar C√≥digo

    steps:
      - name: 1. Obter c√≥digo do reposit√≥rio
        uses: actions/checkout@v4

      - name: 2. Configurar PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3' # Ajuste para sua vers√£o do PHP
          extensions: mbstring, dom, curl, xml, fileinfo, mysql, gd, sqlite, pdo_sqlite
          coverage: none

      - name: 3. Copiar .env para testes
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: 4. Instalar depend√™ncias (Composer)
        run: composer install --prefer-dist --no-progress

      - name: 5. Gerar chave da aplica√ß√£o
        run: php artisan key:generate

      - name: 6. Configurar banco de dados (SQLite)
        run: |
          touch database/database.sqlite
          php artisan migrate --database=sqlite --force

      - name: 7. Executar An√°lise Est√°tica (Pint)
        run: ./vendor/bin/pint --test

      - name: 8. Executar Testes (PHPUnit)
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: ./vendor/bin/phpunit

  # Job 2: Deploy (apenas na branch 'main')
  deploy:
    runs-on: ubuntu-latest
    name: Deploy no Servidor EC2
    needs: test-and-lint  # S√≥ executa se o job 'test-and-lint' passar
    if: github.ref == 'refs/heads/main' # S√≥ executa em push para a 'main'

    steps:
      - name: 1. Obter c√≥digo do reposit√≥rio
        uses: actions/checkout@v4

      - name: 2. Configurar Chave SSH e Known Hosts
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          name: id_rsa
          known_hosts: |
            ${{ secrets.AWS_HOST }}

      - name: 4. Executar Script de Deploy na EC2
        run: |
          ssh -T -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
            # Navega para a pasta da API (ALTERE SE NECESS√ÅRIO)
            cd /var/www/report-api

            # Entra em modo de manuten√ß√£o
            php artisan down

            # Baixa as √∫ltimas mudan√ßas
            git pull origin main

            # Remove o diret√≥rio vendor antigo para evitar conflitos
            sudo rm -rf vendor/

            # Instala depend√™ncias de produ√ß√£o
            composer install --no-dev --optimize-autoloader

            # Roda as migra√ß√µes
            php artisan migrate --force

            # Limpa e otimiza os caches
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            # Reinicia o processador de filas (avisa para recarregar o c√≥digo)
            php artisan queue:restart

            # Sai do modo de manuten√ß√£o
            php artisan up

            # **ADI√á√ÉO CRUCIAL:**
            # Finalmente, garante que o processador de fila (worker) est√° a correr com PM2
            echo "Garantindo que o 'queue worker' est√° a correr com PM2..."

            # Tenta reiniciar (restart) o worker. Se falhar (||), inicia-o pela primeira vez.
            # O '--name' √© crucial para o PM2 se lembrar do processo.
            pm2 restart laravel-queue-worker 2>/dev/null || pm2 start "php artisan queue:work --sleep=3 --tries=3" --name "laravel-queue-worker"

            echo "üöÄ Deploy da API conclu√≠do!"
          EOF
